/*
 * Code generated by github.com/wilhuang/goi18n. DO NOT EDIT.
 * version: 1.0.0
 * date: 2024-04-24
 */
package lang

import (
	"strconv"
	"sync"
)

var (
	_default_locale string = _LANGS[0]
	_default_id     int    = 0
)
var (
	_LANG_ID    = map[string]int{} // 语言对应的内部标识
	_MUTEX_STEP = sync.RWMutex{}
	_LANG_SEP   = map[int]string{} // 语言对应的分隔符
)

func init() {
	_LANG_ID = make(map[string]int, I18N_LEN)
	_LANG_SEP = make(map[int]string, I18N_LEN)
	for id, langstr := range _LANGS {
		_LANG_ID[langstr] = id
		_LANG_SEP[id] = ","
	}

	SetDefaultLocale(_default_locale)
}

// IsLocaleSupport 语言是否支持
func IsLocaleSupport(l string) bool {
	_, ok := _LANG_ID[l]
	return ok
}

// GetDefaultLocale 获取默认语言
func GetDefaultLocale() string {
	return _default_locale
}

// setDefaultl 设置默认语言
func SetDefaultLocale(l string) bool {
	id, ok := _LANG_ID[l]
	if ok {
		_default_locale = l
		_default_id = id
	}
	return ok
}

// SetSeparator 设置分隔符
func SetSeparatorAll(sep string) {
	_MUTEX_STEP.Lock()
	for id := range _LANG_SEP {
		_LANG_SEP[id] = sep
	}
	_MUTEX_STEP.Unlock()
}

// SetSeparator 设置分隔符
func SetSeparator(l string, sep string) bool {
	id, ok := _LANG_ID[l]
	if ok {
		_MUTEX_STEP.Lock()
		_LANG_SEP[id] = sep
		_MUTEX_STEP.Unlock()
	}
	return ok
}

// GetDefaultId 获取默认语言的内部标识
func GetDefaultId() int {
	return _default_id
}

// GetLocaleId 获取语言对应的内部标识
func GetLocaleId(l string) int {
	id, ok := _LANG_ID[l]
	if ok {
		return id
	}
	return _default_id
}

// GetLocaleIds 获取所有语言对应的内部标识
func GetLocaleIds() [I18N_LEN]string {
	ls := _LANGS
	return ls
}

type Code uint32 // 国际化的对象结构

// transOne 读取翻译
func (c Code) transOne(id int) string {
	if c < ERR_CODE_UNKNOW || c >= _end {
		return _LANGS[id] + "{" + strconv.FormatInt(int64(c), 10) + "}"
	}

	if c <= _start {
		// TODO 后续添加内置错误码
		return "ERR_CODE_UNKNOW"
	}
	return entries[id][c-_start-1]
}

// String 获取string类型的key值
func (c Code) String() string {
	return c.transOne(I18N_LEN)
}

// TransById 获取指定语言的翻译
//   - id  指定语言的Id
//   - args   Code类型或fmt支持的类型
func (c Code) TransById(id int, args ...any) string {
	return AppendArgs(c.transOne(id), id, args...)
}

// Default 获取默认语言的翻译
//   - args   Code类型或fmt支持的类型
func (c Code) Default(args ...any) string {
	id := _default_id
	return AppendArgs(c.transOne(id), id, args...)
}

// Trans 获取指定语言的翻译
//   - l 指定的语言版本
//   - args   Code类型或fmt支持的类型，其中Code类型是直接插入原Code的，也就是说如果Code包含%[1]s，那么可能会出现冲突
func (c Code) Trans(l string, args ...any) string {
	id := GetLocaleId(l)
	return AppendArgs(c.transOne(id), id, args...)
}

// TransAll 获取全部翻译
//   - args Code类型或fmt支持的类型
func (c Code) TransAll(args ...any) [I18N_LEN]string {
	var str [I18N_LEN]string
	for id := range _LANGS {
		str[id] = AppendArgs(c.transOne(id), id, args...)
	}
	return str
}
