/*
 * Code generated by github.com/wilhuang/goi18n. DO NOT EDIT.
 * version: 1.0.0
 * date: 2024-04-24
 */
package lang

import (
	"fmt"
)

const (
	_KEY_LANG_STR         = "k" // 关键字对应的语言标识
	_KEY_LANG_CODE uint16 = 0   // 关键字对应的内部语言标识
)

var (
	_default_langstr  string = _KEY_LANG_STR
	_default_langcode uint16 = _KEY_LANG_CODE
)

// 语言对应的顺序
var _code_sort [_NUM_LANG]uint16

// 语言对应的内部标识
var _code_supported = map[string]uint16{
	_KEY_LANG_STR: _KEY_LANG_CODE,
}

// 语言对应的分隔符
var _code_separator = map[uint16]string{
	_KEY_LANG_CODE: ",",
}

func init() {
	for i := range _default_langsort {
		langCode := uint16(i + 1)
		_code_sort[i] = langCode
		_code_supported[_default_langsort[i]] = langCode
		_code_separator[langCode] = ","
	}

	SetDefaultLocale(_default_langsort[0])
}

// IsLocaleSupport 语言是否支持
func IsLocaleSupport(locale string) bool {
	_, ok := _code_supported[locale]
	return ok
}

func GetDefaultLocale() string {
	return _default_langstr
}

// setDefaultLocale 设置默认语言
func SetDefaultLocale(locale string) bool {
	langCode, ok := _code_supported[locale]
	if ok {
		_default_langstr = locale
		_default_langcode = langCode
	}
	return ok
}

// SetSeparator 设置分隔符
func SetSeparator(locale string, sep string) bool {
	langCode, ok := _code_supported[locale]
	if ok {
		_code_separator[langCode] = sep
	}
	return ok
}

func GetLocaleSort() [_NUM_LANG]string {
	var locales [_NUM_LANG]string
	for i, langCode := range _code_sort {
		locales[i] = _default_langsort[langCode-1]
	}
	return locales
}

func SetLocaleSort(locales ...string) error {
	if len(locales) != int(_NUM_LANG) {
		return fmt.Errorf("locale size must be %d", _NUM_LANG)
	}
	var toSetSort [_NUM_LANG]uint16
	for idx, locale := range locales {
		langCode, ok := _code_supported[locale]
		if !ok {
			return fmt.Errorf("locale %s not support", locale)
		}
		toSetSort[idx] = langCode
	}
	_code_sort = toSetSort
	return nil
}

type Code uint32 // 国际化的对象结构

// _transOne 读取翻译
func (i Code) _transOne(locale uint16) string {
	if i <= _start {
		// TODO 后续添加内置错误码
		return "ERR_CODE_UNKNOW"
	}

	if i < _end {
		return entries[locale][i-_start-1]
	}

	return fmt.Sprintf("Code[%d](%d)", locale, i)
}

// String 获取string类型的key值
func (i Code) String() string {
	return i._transOne(0)
}

func (i Code) _trans(locale uint16, args ...any) string {
	msg := i._transOne(locale)
	if len(args) > 0 {
		if len(msg) == 0 {
			return ""
		}
		var com []any
		for _, arg := range args {
			switch v := arg.(type) {
			case Code:
				com = append(com, v._transOne(locale))
			case []Code:
				com = append(com, Join(v, _code_separator[locale], func(c Code) string {
					return c._transOne(locale)
				}))
			case []string:
				com = append(com, Join(v, _code_separator[locale]))
			case []float64:
				com = append(com, Join(v, _code_separator[locale]))
			case []float32:
				com = append(com, Join(v, _code_separator[locale]))
			case []int:
				com = append(com, Join(v, _code_separator[locale]))
			case []int8:
				com = append(com, Join(v, _code_separator[locale]))
			case []int16:
				com = append(com, Join(v, _code_separator[locale]))
			case []int32:
				com = append(com, Join(v, _code_separator[locale]))
			case []int64:
				com = append(com, Join(v, _code_separator[locale]))
			case []uint:
				com = append(com, Join(v, _code_separator[locale]))
			case []uint8:
				com = append(com, Join(v, _code_separator[locale]))
			case []uint16:
				com = append(com, Join(v, _code_separator[locale]))
			case []uint32:
				com = append(com, Join(v, _code_separator[locale]))
			case []uint64:
				com = append(com, Join(v, _code_separator[locale]))
			default:
				com = append(com, arg)
			}
		}
		return fmt.Sprintf(msg, com...)
	}
	return msg
}

// Default 获取默认语言的翻译
//   - args   Code类型或fmt支持的类型
func (i Code) Default(args ...any) string {
	return i._trans(_default_langcode, args...)
}

// Trans 获取指定语言的翻译
//   - locale 指定的语言版本
//   - args   Code类型或fmt支持的类型，其中Code类型是直接插入原Code的，也就是说如果Code包含%[1]s，那么可能会出现冲突
func (i Code) Trans(locale string, args ...any) string {
	langCode, ok := _code_supported[locale]
	if !ok {
		langCode = _default_langcode
	}
	return i._trans(langCode, args...)
}

// TransAll 获取全部翻译
func (i Code) TransAll(args ...any) [_NUM_LANG]string {
	var str [_NUM_LANG]string
	for idx, langCode := range _code_sort {
		str[idx] = i._trans(langCode)
	}
	return str
}

// Error 获取指定语言错误类型的翻译
//   - locale 指定的语言版本
//   - args   Code类型或fmt支持的类型
func (i Code) Error(locale string, args ...any) error {
	langCode, ok := _code_supported[locale]
	if !ok {
		langCode = _default_langcode
	}
	return NewError(i._trans(langCode, args...))
}

type CodeError struct {
	s string
}

func (e *CodeError) Error() string {
	return e.s
}

func NewError(s string) error {
	return &CodeError{s}
}
